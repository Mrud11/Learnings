# -*- coding: utf-8 -*-
"""Mrudula_Assignemnt.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cXs1GW1VvOidw_m8WpXDxmanHtA_FHh_

**Assignment:** Predict Graduate University Admissions Using **Regression Problem Statement**: Analyze the dataset given and use regression techniques to measure the graduation rate of students in a university.
"""

!pip install sweetviz

# Commented out IPython magic to ensure Python compatibility.
#Task2
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
import sweetviz as sv
# %matplotlib inline
import warnings
warnings.filterwarnings('ignore')

#task 3
from google.colab import drive
drive.mount('/content/drive')

#read_csv file
df=pd.read_csv(r"/content/drive/MyDrive/csv files/Admission_Predict.csv")

df

#task 4
df.info()

df.shape

df.describe()

df.dtypes

df.columns

sweet_report = sv.analyze(df)  # Sweetviz analysis
sweet_report.show_html("sweetviz_report.html")

from IPython.core.display import display, HTML
display(HTML("sweetviz_report.html"))

from google.colab import files
files.download("sweetviz_report.html")

##checking if any columns has missing values
df.isnull().sum()

#removeduplcates #noduplicates
df.drop_duplicates(inplace=True)
print(df)

df.drop(columns=['Serial No.'], inplace=True)

#handling Outliers
Q1 = df.quantile(0.25)
Q3 = df.quantile(0.75)
IQR = Q3 - Q1
df = df[~((df < (Q1 - 1.5 * IQR)) | (df > (Q3 + 1.5 * IQR))).any(axis=1)]

print(df)

plt.figure(figsize=(10, 6))
sns.boxplot(data=df)
plt.xticks(rotation=90)  # Rotate column labels for better visibility
plt.show()

df = df[(df["GRE Score"] > 255) & (df["TOEFL Score"] > 90)]  # Example filtering

print(df[['GRE Score', 'TOEFL Score']])

# Task 5 Data Visualization
#pairwise comparison and distribution
plt.figure(figsize=(8, 6))
sns.heatmap(df.corr(), annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Feature Correlation Heatmap")
plt.show()

#Individual Feature vs. Chance of Admit
px.scatter(df, x="GRE Score", y="Chance of Admit ", color="Research", title="GRE Score vs Chance of Admit")

px.scatter(df, x="CGPA", y="Chance of Admit ", color="University Rating", title="CGPA vs Chance of Admit")

px.scatter(df, x="TOEFL Score", y="Chance of Admit ", color="University Rating", title="TOEFL Score vs Chance of Admit")

#1 Lineplot
sns.lineplot(x=df["GRE Score"], y=df["Chance of Admit "], marker="o", color="b")
plt.title("GRE Score vs Chance of Admit (Line Plot)")
plt.show()

#Box plot
sns.boxplot(x=df["University Rating"], y=df["Chance of Admit "], palette="coolwarm")
plt.title("University Rating vs Chance of Admit (Box Plot)")
plt.show()

#Barchart
sns.barplot(x=df["Research"], y=df["Chance of Admit "], palette="coolwarm")
plt.title("Research vs Chance of Admit (Bar Plot)")
plt.show()

#Task 6 Min max Scaler

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler  # Import MinMaxScaler
from sklearn.linear_model import LinearRegression

X = df.drop(columns=["Chance of Admit "])
y = df["Chance of Admit "]

scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

#Task 7
# Import necessary metrics functions
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error

print("R2 Score:", r2_score(y_test, y_pred))
print("MAE:", mean_absolute_error(y_test, y_pred))
print("MSE:", mean_squared_error(y_test, y_pred))

print(df.corr())  # Pairwise correlation